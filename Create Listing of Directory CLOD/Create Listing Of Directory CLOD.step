{"creationTimeStamp":"2024-09-26T22:56:45.603Z","modifiedTimeStamp":"2024-09-26T23:04:25.576Z","createdBy":"sasadm","modifiedBy":"sasadm","name":"Create Listing Of Directory CLOD.step","displayName":"Create Listing Of Directory CLOD.step","localDisplayName":"Create Listing Of Directory CLOD.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","uri":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","uri":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","uri":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","uri":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac/copy","uri":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","uri":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","uri":"/dataFlows/steps/1c73b278-bbf9-440b-8574-905415b1c5ac","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"outputtable_ui","displayName":"outputtable_ui","localDisplayName":"outputtable_ui","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"Essentials\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Essentials\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"root_directory_ui\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Provide Root Directory (can be from within SAS Server or SAS Content):\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"Select Root Directory\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Extension_ui\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Extension:\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outputtable_ui\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Choose Output Table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"work.directory_overview\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"General\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"General\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"clod_traverse_directories_ui\",\n\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\"label\": \"Traverse Subdirectories?\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\"label\": \"Yes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"label\": \"No\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"output_selection_ui\",\n\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\"label\": \"Select Type of Output:\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\"label\": \"Folders + Files\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"label\": \"Files Only\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"2\",\n\t\t\t\t\t\t\t\"label\": \"Folders Only\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"cas_save_on_disk_ui\",\n\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\"label\": \"Should promoted table be saved on disk?\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\"label\": \"Yes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"label\": \"No\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$cas_promote_ui\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"cas_promote_ui\",\n\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\"label\": \"If a CAS library is selected, should table be promoted?\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\"label\": \"Yes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"label\": \"No\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"Admin\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Admin\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"debug_mode_ui\",\n\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\"label\": \"Debug Mode?\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\"label\": \"Yes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"label\": \"No\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"write_log_into_file_ui\",\n\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\"label\": \"Write Log into File? (\\\"Yes\\\" will open input field below for path selection)\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\"label\": \"Yes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"label\": \"No\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"log_file_path_ui\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Path for logfile creation:\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"Select directory in SAS Server or SAS Content\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$write_log_into_file_ui\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"options_seq_ui\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Provide options to be applied for this run (only single options allowed like mprint, nosource, notes, etc):.\",\n\t\t\t\t\t\"placeholder\": \"mprint notes source\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"About\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"CLOD: Create Listing Of Directory:\\n=========================\\nVersion: 3.1.2\\n\\nCLOD lists all files and directories that can be found under a provided (root-) directory.\\n\\nIf you have any questions, suggestions, ideas or any unexpected behavior, please contact:\\nstephan.weigandt@sas.com.\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_parmlist\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Here is an overview of the available parameters:\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section_parameter1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Provide Root Directory (can be from within SAS Server or SAS Content) - ROOT_DIRECTORY_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"about_parameter1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Provide the top level directory that CLOD should use to start looking for files and subfolders. CLOD will then traverse through the whole directory structure and find all the files and folders below this top level directory. \\n\\nIf the root directory is in the SAS Server area, this has to start out with: sasserver: (e.g. example value for root_directory: sasserver:/mnt/desired/path/for/files_to_be_readin/from/SASServer/).\\n\\nIf the root directory is in the SAS Content area, this has to start out with: sascontent: (e.g. example value for root_directory: sascontent:/Public/desired_path_for/files/in/SASContent/).\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section_paramete2\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Extension - EXTENSION_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"about_parameter2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Default value: *\\n\\nif * is provided, all files are captured in the output. \\nOtherwise, any text string can provided, which will be used as a filter for the ending of the files. So only files will be captured that fall into this filter. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Target Libname (CAS or 94, needs to exist) - TARGET_LIBNAME_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"This can be any existing library accessible to SAS Studio. \\nIf it is a CASLIB, the table will NOT be promoted or saved to disk. \\nIf that is desired, this would need to happen outside the custom step. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Name of Output Dataset? - OUTPUT_DATASET_NAME_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Provide the output table name. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section9\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Traverse Subdirectories? - CLOD_TRAVERSE_DIRECTORIES_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text11\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Suggested default value: Yes (1)\\n\\nIf Yes is selected, CLOD will traverse all directories that can be found under directory provided in \\\"Root Directory\\\" parameter.\\nIf No is selected, CLOD will only look for files in selected directory. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section8\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Select Type of Output - OUTPUT_SELECTION_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text10\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Suggested default value: \\\"Files Only\\\" (0)\\n\\nIf \\\"Files Only\\\" is selected, the output dataset  only contains files that could be found. \\nIf \\\"Folders + Files\\\" (1) is selected, the output dataset contains the folder names and the file names.\\nIf \\\"Folders Only\\\" (2) is selected, the output dataset only contains the names of the folders that could be found. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section7\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"If a CAS library is selected, should table be promoted? - CAS_PROMOTE_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text9\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Suggested default value: No (0)\\nThis selection is only applied if selected target library is a CAS library. \\nIf No is selected, the table is not promoted and stays only active for the local session.\\nIf Yes is selected, CLOD will promote the table. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section6\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Should promoted table be saved on disk? - CAS_SAVE_ON_DISK_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text8\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Suggested default value: No (0)\\nThis selection is only applied if selected target library is a CAS library and output table is promoted. \\nIf No is selected, the table is not saved on disk.\\nIf Yes is selected, CLOD will save table on disk and make it persistent. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section5\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Debug Mode? - DEBUG_MODE_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text7\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Suggested default value: No (0)\\n\\nIf set to 1, CLOD writes out more information out to the log, that might be helpful for further investigations.\\n\\nIf set to 0, CLOD just writes out the default SAS log output, depending on the settings of the options mprint, source and notes.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section4\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Path for logfile creation - LOG_FILE_PATH_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text6\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"suggested default value: empty/missing.\\n\\nThis parameter is only relevant when the parameter \\\"WRITE_LOG_INTO_FILE_UI\\\" is set to 1. \\n\\nProvide a default path for all runs: as soon as a path is provided, this path is being used for ALL runs.\\n\\nIf the log directory is in the SAS Server area, this has to start out with: sasserver: (e.g. example value for provide_default_log_path: sasserver:/mnt/desired/path/for/log_files_to_be_saved/on/SASServer/).\\n\\nIf the log directory is in the SAS Content area, this has to start out with: sascontent: (e.g. example value for provide_default_log_path: sascontent:/Public/desired_path_for/logfiles/in/SASContent/).\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section10\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Write Log into File? - WRITE_LOG_INTO_FILE_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text12\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Suggested default value: No (0)\\n\\nIf set to 0, log is written into default SAS log location.\\n\\nIf set to 1, log is written to location as provided under the parameter \\\"LOG_FILE_PATH_UI\\\".\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Provide options to be applied for this run (only single options allowed like mprint, nosource, etc). - OPTIONS_SEQ_UI\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text5\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"If provided those options will be applied to the execution of the code. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"root_directory_ui\": \"\",\n\t\t\"Extension_ui\": \"*\",\n\t\t\"outputtable_ui\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"clod_traverse_directories_ui\": {\n\t\t\t\"value\": \"1\",\n\t\t\t\"label\": \"Yes\"\n\t\t},\n\t\t\"output_selection_ui\": {\n\t\t\t\"value\": \"0\",\n\t\t\t\"label\": \"Files Only\"\n\t\t},\n\t\t\"cas_save_on_disk_ui\": {\n\t\t\t\"value\": \"0\",\n\t\t\t\"label\": \"No\"\n\t\t},\n\t\t\"cas_promote_ui\": {\n\t\t\t\"value\": \"0\",\n\t\t\t\"label\": \"No\"\n\t\t},\n\t\t\"debug_mode_ui\": {\n\t\t\t\"value\": \"0\",\n\t\t\t\"label\": \"No\"\n\t\t},\n\t\t\"write_log_into_file_ui\": {\n\t\t\t\"value\": \"0\",\n\t\t\t\"label\": \"No\"\n\t\t},\n\t\t\"log_file_path_ui\": \"\",\n\t\t\"options_seq_ui\": \"\"\n\t},\n\t\"promptHierarchies\": []\n}","templates":{"SAS":"/******************************************************************************\n                                        %adjust_option_setings_controlled\n                                        ________\nHelps to maintain option changes in a program flow.\n______________________________________________________________________________\n\nUSAGE:                         %adjust_option_setings_controlled(aosc_option_seq = ,\n                                                        aosc_temp_option_storage_ds = ,\n                                                        aosc_running_mode = ,\n                                                        aosc_validvarname_setting =\n                                                        )\n______________________________________________________________________________\n\nDESCRIPTION:\n\nWhen option changes occur (only single word options allowed), then this macro\nhelps to maintain the original option setting, so at the end, the system can\nrevert back to the original settings.\n______________________________________________________________________________\n\nINPUT PARAMETERS AND KEYWORDS:\n\n    aosc_option_seq                    This can be a blank separated list of single word\n                                    SAS options (e.g. like: source, notes, etc...).\n                                    If empty nothing happens in CHANGE mode.\n    aosc_temp_option_storage_ds     provide the full dataset name (e.g. work._aosc_setting_storage)\n                                    where the original option values (of the ones that are\n                                    provided in AOSC_OPTION_SEQ) are stored.\n    aosc_running_mode                2 modes available:\n                                    CHANGE: takes settings from AOSC_OPTION_SEQ and applies\n                                            those\n                                    RESET: if AOSC_TEMP_OPTION_STORAGE_DS exists, this mode\n                                            will set options back according to content of\n                                            this dataset.\n    aosc_validvarname_setting         if not blank, validvarname will be set to the value\n                                    as provided with this parameter\n_________________________________________________________________________\n\nCALLS: none.\n______________________________________________________________________________\n\nNOTES: (Initials, date, summary)\n\nStephan Weigandt    20220922  First officially Released Version\n______________________________________________________________________________\n\n*******************************************************************************/\n\n%macro adjust_option_setings_controlled(\n    aosc_option_seq = ,\n    aosc_temp_option_storage_ds = work._aosc_temp_option_storage_ds,\n    aosc_running_mode = ,\n    aosc_validvarname_setting =\n    );\n\n\n    %if %upcase(\"&aosc_running_mode\") = \"CHANGE\" %then\n    %do;\n        data &aosc_temp_option_storage_ds;\n            length\n                new_setting $24.\n                original_setting $24.\n                new_single_setting_seq $256.\n                ;\n            new_setting = \"\";\n            original_setting = \"\";\n            new_single_setting_seq = \"\";\n            numberofsettings = 0;\n            additional_option_setting = 0;\n            if 0;\n        run;\n\n        %if \"&aosc_option_seq\" ne \"\" or\n            \"&aosc_validvarname_setting\" ne \"\" %then\n        %do;\n            data &aosc_temp_option_storage_ds;\n                length\n                    new_setting $24.\n                    original_setting $24.\n                    new_single_setting_seq $256.\n                    ;\n                new_single_setting_seq = strip(\"&aosc_option_seq\");\n                %if \"&aosc_validvarname_setting\" ne \"\" %then\n                %do;\n                    original_setting = getoption(\"validvarname\");\n                    additional_option_setting = 1;\n                    new_setting = \"&aosc_validvarname_setting\";\n                    output;\n                    call execute(\"option validvarname = \"||new_Setting||\";\");\n                %end;\n                %if \"&aosc_option_seq\" ne \"\" %then\n                %do;\n                    numberofsettings = count(new_single_setting_seq, \" \") + 1;\n                    additional_option_setting = 0;\n                    do i = 1 to numberofsettings;\n                        new_setting = \"\";\n                        new_setting = scan(new_single_setting_seq, i, \" \");\n                        if not missing(new_setting) then\n                        do;\n                            original_setting = getoption(new_setting);\n                            output;\n                            call execute(\"option \"||new_Setting||\";\");\n                        end;\n                    end;\n                %end;\n            run;\n        %end;\n    %end;\n\n    %if %upcase(\"&aosc_running_mode\") = \"RESET\" %then\n    %do;\n        %if %sysfunc(exist(&aosc_temp_option_storage_ds)) %then\n        %do;\n            data _null_;\n                set &aosc_temp_option_storage_ds;\n                if additional_option_setting = 1 then\n                do;\n                    call execute(\"option validvarname = \"||original_setting||\";\");\n                end; else\n                do;\n                    call execute(\"option \"||original_setting||\";\");\n                end;\n            run;\n        %end;\n    %end;\n%mend adjust_option_setings_controlled;\n\n/** FOR TESTING ***\noption nomprint nosource notes ;\n%let option_seq = mprint notes source;\n%let running_mode = CHANGE;\n%let validvarname_setting = any;\n\n%put PRECHANGE;\n%put VALIDVARNAME: %sysfunc(getoption(validvarname));\n%put SOURCE: %sysfunc(getoption(source));\n%put NOTES: %sysfunc(getoption(notes));\n%put MPRINT: %sysfunc(getoption(mprint));\n\n%adjust_option_setings_controlled(\n    aosc_option_seq = &option_seq,\n    aosc_running_mode = &running_mode,\n    aosc_validvarname_setting = &validvarname_setting\n    );\n\n%put POSTCHANGE;\n%put VALIDVARNAME: %sysfunc(getoption(validvarname));\n%put SOURCE: %sysfunc(getoption(source));\n%put NOTES: %sysfunc(getoption(notes));\n%put MPRINT: %sysfunc(getoption(mprint));\n\n\n%let running_mode = RESET;\n\n%adjust_option_setings_controlled(\n    aosc_running_mode = &running_mode\n    );\n\n%put POSTRESET;\n%put VALIDVARNAME: %sysfunc(getoption(validvarname));\n%put SOURCE: %sysfunc(getoption(source));\n%put NOTES: %sysfunc(getoption(notes));\n%put MPRINT: %sysfunc(getoption(mprint));\n\n\n\n*********************/\n\n/**\nstore current SAS options settings, so they can be reset\nat the end of processing\n**/\n\n\n%adjust_option_setings_controlled(\n    aosc_option_seq = &options_seq_ui,\n    aosc_running_mode = CHANGE,\n    aosc_validvarname_setting = any\n    );\n\n%let clod_delimiter = ;\n%macro set_os_dependent_values(\n    sodv_delimiter = clod_delimiter\n    );\n    %if %upcase(&SYSSCP) = WIN %then\n    %do;\n        %let &sodv_delimiter = \\;\n    %end; %else\n    %do;\n        %let &sodv_delimiter = /;\n    %end;\n%mend set_os_dependent_values;\n%set_os_dependent_values(\n    sodv_delimiter = clod_delimiter\n    );\n\n/******************************************************************************\n\n                                    %list_all_files\n                                        ________\n\ncreates a list of files, based on the provided extensions, that are available\nwithin a root directory. It automatically also checks all subdirectories.\n\n______________________________________________________________________________\n\nUSAGE:                         see testing section on the bottom of this code\n\n______________________________________________________________________________\n\nDESCRIPTION:\n\nThis macro creates a SAS dataset that lists all files that can be found within a\nroot directory and all subdirectories under the provided root directory.\nThis can be applied to all available files (by choosing \"*\" as extension),\nor for specific extensions.\n______________________________________________________________________________\n\nINPUT PARAMETERS AND KEYWORDS:\n\nlaf_root_dir                provide the top level directory from\n                            where to search for files.\nlaf_extenstion_to_check     can be the wildcard \"*\" or\n                            any extension, e.g. \"CSV\", \"XLM\" etc\n                            (provide without quotes)\nlaf_output_ds_file_overview       provide SAS datasets providing\n                                LIBNAME and SAS Dataset name\n______________________________________________________________________________\n\nNOTES: (Initials, date, summary)\n\nStephan Weigandt    20200406  First officially Released Version\nStephan Weigandt    20220610  expanded functionality to also cover\n                              SAS Content objects\n______________________________________________________________________________\n\n*******************************************************************************/\n\n%macro list_all_files(\n    laf_root_dir,\n    laf_extenstion_to_check,\n    laf_output_ds_file_overview,\n    laf_debug_mode = 0,\n    laf_directory_separator = /,\n    laf_traverse_directories = 1,\n    laf_is_sas_content_directory = 0,\n    laf_iteration_number = 0_0,\n    laf_output_selection = 0\n    );\n    %local\n        filrf\n        rc\n        did\n        memcnt\n        name\n        lal_append_flag\n        lal_length\n        tot_obs\n        table_append_seq\n        laf_full_file_name\n        i\n        laf_debug_text_\n        ;\n\t%let laf_root_dir = %sysfunc(dequote(&laf_root_dir));\n\n    %let laf_debug_text_skipping = INFORMATION: Skipping due to extension:;\n    %let laf_debug_text_scanning = INFORMATION: Scanning next directory:;\n\n\tdata _null_;\n\t\tlength laf_root_dir $4096.;\n\t\tlaf_root_dir = strip(symget(\"laf_root_dir\"));\n\t\tlengthstr = klength(laf_root_dir);\n\t\tendstr = ksubstr(laf_root_dir, lengthstr, 1);\n\t\tif endstr ne \"/\" then\n\t\t\tlaf_root_dir = strip(laf_root_dir)||'/';\n\t\tcall symput('laf_root_dir', strip(laf_root_dir));\n\t\t    put laf_root_dir;\n\trun;\n/*     %let lal_length = %length(&laf_root_dir); */\n/*     %if \"%substr(%trim(%left(&laf_root_dir)), &lal_length, 1)\" ne */\n/*             \"%trim(%left(&laf_directory_separator))\" %then */\n/*     %do; */\n/*         %let laf_root_dir = %trim(%left(&laf_root_dir))&laf_directory_separator; */\n/*     %end; */\n    /**\n        clean up work directory to prevent unwanted beahvior\n    **/\n    %if &laf_iteration_number = 0_0 %then\n    %do;\n        proc datasets lib= work;\n            delete _LAF_spcl_list_files_:;\n        quit;\n    %end;\n    %let laf_do_processing = 1;\n    %if &laf_is_sas_content_directory = 0 %then\n    %do;\n        filename f&laf_iteration_number \"&laf_root_dir\";\n    %end; %else\n    %do;\n        %let laf_rc = 1;\n        data _null_;\n            length fref $ 8 folderPath $ 1024;\n            folderPath = \"&laf_root_dir\";\n            fref=\"__isdir\";\n            rcf = filename(fref, ,\n                            \"filesrvc\",\n                            cats('folderpath=',quote(strip(folderPath)))\n                            );\n            put rcf;\n            call symput (\"laf_rc\", strip(rcf));\n        run;\n\n        %if &laf_rc = 0 %then\n        %do;\n            filename f&laf_iteration_number filesrvc folderpath=\"&laf_root_dir\";\n        %end; %else\n        %do;\n            %let laf_do_processing = 0;\n        %end;\n    %end;\n    %let laf_next_iteration = %eval(%scan(&laf_iteration_number, 1, '_') + 1);\n    %let lal_append_flag = 0;\n    %if %sysfunc(exist(work._LAF_spcl_list_files_&laf_iteration_number)) %then\n    %do;\n        data work._LAF_spcl_list_files_&laf_iteration_number._inter;\n            set work._LAF_spcl_list_files_&laf_iteration_number\n            %if %sysfunc(exist(\n                        work._LAF_spcl_list_files_&laf_iteration_number._inter\n                        )) %then\n            %do;\n                work._LAF_spcl_list_files_&laf_iteration_number._inter\n            %end;\n            ;\n        run;\n        %let lal_append_flag = 1;\n    %end;\n    data work._LAF_spcl_list_files_&laf_iteration_number ;\n        keep\n            directory_path\n            full_file_name\n            file_name\n            is_in_SAS_Content_flag\n            object_type\n            ;\n        length\n            directory_path $768\n            file_name $256\n            full_file_name $1024\n            arg1 $4096\n\t\t\targ2 $4096\n\t\t\targ3 $4096\n\t\t\targ3b $4096\n\t\t\targ4 $4096\n            object_type $12\n            ;\n        is_in_SAS_Content_flag = &laf_is_sas_content_directory;\n        directory_path = symget(\"laf_root_dir\");\n    %if &laf_do_processing = 1 %then\n    %do;\n        did = dopen(\"f&laf_iteration_number\");\n        mcount = dnum(did);\n        /**\n        check if directory exists or the correct area is chosen.\n        if not set to 0 to prevent error message\n        **/\n        if missing(mcount) then\n            mcount = 0;\n        do i=1 to mcount;\n            file_name = dread(did, i);\n            fid = mopen(did, file_name);\n            fileext = kfind(file_name,'.');\n            extension = kscan(file_name, -1, '.');\n            /* fid=0 means directory in most cases */\n            full_file_name = STRIP(directory_path)||STRIP(file_name);\n            if fid > 0 or fileext then\n            do;\n                if \"&laf_extenstion_to_check\" = \"*\" or\n                kupcase(extension) = %upcase(\"&laf_extenstion_to_check\") then\n                do;\n                    %if &laf_debug_mode %then\n                    %do;\n                        put \"INFORMATION: Found following file:\" full_file_name;\n                    %end;\n                    %if &laf_output_selection le 1 %then\n                    %do;\n                        object_type = \"file\";\n                        output;\n                    %end;\n                end;\n                %if &laf_debug_mode %then\n                %do;\n                    else\n                    do;\n                        put \"&laf_debug_text_skipping\" full_file_name;\n                    end;\n                %end;\n            end;\n/*             %if &laf_traverse_directories = 1 %then */\n/*             %do; */\n                else\n                do;\n                    %if &laf_debug_mode %then\n                    %do;\n                        put \"&laf_debug_text_scanning\" full_file_name;\n                    %end;\n                    %if &laf_output_selection ge 1 %then\n                    %do;\n                        object_type = \"folder\";\n                        output;\n                    %end;\n                    arg1 = cats('%nrstr(%list_all_files(',\n                                quote(strip(full_file_name)),\n                                \", &laf_extenstion_to_check,\"\n                                );\n                    arg2 = cats(\"&laf_output_ds_file_overview,\n                                laf_debug_mode = &laf_debug_mode,\"\n                                );\n                    arg3 = cats(\"laf_directory_separator =\n                                    &laf_directory_separator,\n                                laf_traverse_directories =\n                                    &laf_traverse_directories,\"\n                                );\n                    arg3b = cats(\"laf_output_selection =\n                                    &laf_output_selection, \"\n                                );\n                    arg4 = cats(\"laf_is_sas_content_directory =\n                                    &laf_is_sas_content_directory,\n                                laf_iteration_number =\n                                    &laf_next_iteration._\",i,\"))\"\n                                );\n                    call execute(strip(arg1)||\n                                strip(arg2)||\n                                strip(arg3)||\n                                strip(arg3b)||\n                                strip(arg4)\n                                );\n                end;\n/*             %end; */\n        end;\n        rc = dclose(did);\n    %end;\n%else\n    %do;\n        full_file_name = STRIP(ksubstr(directory_path,\n                                        1,\n                                        klength(directory_path)-1)\n                                );\n        %if &laf_output_selection le 1 %then\n        %do;\n            object_type = \"file\";\n            output;\n        %end;\n    %end;\n    run;\n\n    %let tot_obs = 0;\n    proc sql noprint;\n        select nobs into :tot_obs\n        from dictionary.tables\n        where kupcase(libname)='WORK' and\n                kupcase(memname)=\"_LAF_SPCL_LIST_FILES_&laf_iteration_number\";\n    quit;\n/*     %put total records = &tot_obs.; */\n    %if &tot_obs = 0 %then\n    %do;\n        proc datasets lib= work;\n            delete _LAF_SPCL_LIST_FILES_&laf_iteration_number;\n        quit;\n        %if lal_append_flag = 1 %then\n        %do;\n            data work._LAF_spcl_list_files_&laf_iteration_number.;\n                set work._LAF_spcl_list_files_&laf_iteration_number._inter;\n            run;\n            proc datasets lib= work;\n                delete _LAF_spcl_list_files_&laf_iteration_number._inter;\n            quit;\n        %end;\n    %end; %else\n    %do;\n        %if lal_append_flag = 1 %then\n        %do;\n            data work._LAF_spcl_list_files_&laf_iteration_number.;\n                set work._LAF_spcl_list_files_&laf_iteration_number.\n                    work._LAF_spcl_list_files_&laf_iteration_number._inter;\n            run;\n            proc datasets lib= work;\n                delete _LAF_spcl_list_files_&laf_iteration_number._inter;\n            quit;\n        %end;\n    %end;\n\n    /**\n        Only execute the outer ring of the execution sequence, or said otherwise the very first occurence\n    **/\n\n    %if &laf_iteration_number = 0_0 %then\n    %do;\n        %if %sysfunc(exist(&laf_output_ds_file_overview)) %then %do;\n            proc sql;\n                delete from &laf_output_ds_file_overview;\n            quit;\n        %end;\n\n        %let table_append_seq = ;\n        %if &laf_traverse_directories = 1 %then\n        %do;\n\n                proc sql noprint;\n                    select memname into :table_append_seq separated by \" \"\n                    from dictionary.tables\n                    where kupcase(libname)='WORK' and\n                            kupcase(memname)contains\"_LAF_SPCL_LIST_FILES_\";\n                quit;\n        %end; %else\n        %do;\n                proc sql noprint;\n                    select memname into :table_append_seq separated by \" \"\n                    from dictionary.tables\n                    where kupcase(libname)='WORK' and\n                            kupcase(memname)contains\"_LAF_SPCL_LIST_FILES_0_0\";\n                quit;\n        %end;\n\n        %if \"&table_append_seq\" ne \"\" %then\n        %do;\n            data work._laf_file_overview_sort;\n                set &table_append_seq;\n            run;\n            proc sort data =work._laf_file_overview_sort;\n                by full_file_name\n                    descending object_type\n                ;\n            quit;\n\n            data &laf_output_ds_file_overview;\n                set work._laf_file_overview_sort;\n                by full_file_name;\n                if first.full_file_name ne last.full_file_name  then\n                do;\n                    object_type = \"file\";\n                end;\n                if first.full_file_name;\n            run;\n        %end;\n\n    %end;\n\n    %if &laf_do_processing = 1 %then\n    %do;\n        filename f&laf_iteration_number clear;\n    %end;\n%mend list_all_files;\n/** FOR TESTING ***\n\noption mprint source notes;\n%let root_directory = /Users/<<MYUSERID>>/My Folder/SAS Videos;\n%let is_content_dir = 0;\n%let delimiter = \\;\n%let delimiter = /;\n%let output_selection = 1;\n%let extension = *;\n%let overview_ds = work.file_overview;\n%let traverse_directories = 1;\n%list_all_files(\n    &root_directory,\n    &extension,\n    &overview_ds,\n    laf_traverse_directories = &traverse_directories,\n    laf_debug_mode = 1,\n    laf_directory_separator = /,\n    laf_is_sas_content_directory = &is_content_dir,\n    laf_output_selection = &output_selection\n    );\n\n*********************/\n\n/******************************************************************************\n                                        %wordcnt\n                                        ________\nCounts the words in a list\n______________________________________________________________________________\n\nUSAGE:                         %wordcnt(list,delim)\n______________________________________________________________________________\n\nDESCRIPTION:\n\nFinds the number of words/tokens in a string.  The user specifies a\ndelimiter e.g. # to identify what separates the words.  The macro should be\ncalled in the following way:\ne.g. %let x=%wordcnt(item1#item2 item2a#item3, '#').\nAfter running the macro x will be assigned the value of wordcnt.\n______________________________________________________________________________\n\nINPUT PARAMETERS AND KEYWORDS:\n\n  list            the name of the string.\n  delim           the delimiter e.g. '#'.\n_________________________________________________________________________\n\nCALLS: none.\n______________________________________________________________________________\n\nNOTES: (Initials, date, summary)\n\nStephan Weigandt    20200406  First officially Released Version\n______________________________________________________________________________\n\n*******************************************************************************/\n%macro wordcnt(\n    list,\n    delim\n    )\n    ;\n    %local\n        word\n        wc_count;\n    %let wc_count = 0;\n    %if %quote(&list) ne %then\n    %do;\n        %let word = %scan(%quote(&list), 1, &delim);\n        %let word = %quote(&word);\n        %do %while (&word ne);\n            %let wc_count = %eval(&wc_count + 1);\n            %let word = %scan(%quote(&list), &wc_count+1, &delim);\n            %let word = %quote(&word);\n        %end;\n    %end;\n    &wc_count\n%mend wordcnt;\n/** FOR TESTING ***\noption mprint source notes ;\n%let item_seq = a b c#d$f g #h#i$j;\n%let separator = '$' ;\n%let separator = '#' ;\n%let separator = ' ' ;\n%let number_of_items = %wordcnt(&item_seq, &separator);\n%put &=number_of_items;\n\n*********************/\n/**\n  @file\n  @brief <Your brief here>\n  <h4> SAS Macros </h4>\n**/\n%macro execute_all();\n\n    %let write_log_to_file = &write_log_into_file_ui;\n    %if &write_log_to_file eq 1 %then\n    %do;\n        %let provide_default_log_path = %scan(&log_file_path_ui, 2, \":\")/;\n        %let log_file_directory_source_ui = %scan(&log_file_path_ui, 1, \":\");\n\n        %if \"%upcase(&log_file_directory_source_ui)\" eq \"SASSERVER\" %then\n        %do;\n            %let log_file_in_SAS_Content = 0;\n        %end; %else\n        %do;\n            %let log_file_in_SAS_Content = 1;\n        %end;\n\n        /**\n        determine and set todays date\n        **/\n        data _null_;\n            todaysdate = today();\n            year = year(todaysdate);\n            month = put(month(todaysdate), z2.);\n            day = put(day(todaysdate), z2.);\n            nowtime = time();\n            hour = put(hour(nowtime), z2.);\n            minute = put(minute(nowtime), z2.);\n            put minute;\n            timestamp = trim(left(year))||\n                        trim(left(month))||\n                        trim(left(day))||\n                        \"_\"||\n                        trim(left(hour))||\n                        trim(left(minute));\n            call symput('timestamp', timestamp);\n        run;\n        %let timestamp = %trim(%left(&timestamp));\n        %if &debug_mode_ui = 1 %then\n        %do;\n            %put INFORMATION: Logfile location: &provide_default_log_path;\n            %put INFORMATION: Logfile name : clod_run_&timestamp..log;\n        %end;\n\n\n        %if &log_file_in_SAS_Content = 1 %then\n        %do;\n            filename logfl\n                filesrvc\n                folderpath = \"&provide_default_log_path\"\n                filename = \"clod_run_&timestamp..log\";\n            filename printfl\n                filesrvc\n                folderpath = \"&provide_default_log_path\"\n                filename = \"clod_run_&timestamp..out\";\n        %end; %else\n        %do;\n            filename logfl \"&provide_default_log_path.clod_run_&timestamp..log\";\n            filename printfl \"&provide_default_log_path.clod_run_&timestamp..out\";\n        %end;\n        proc printto\n            log=logfl new\n            print=printfl new;\n        quit;\n    %end;\n\n\n\n/*     %put     &=debug_mode_ui    ; */\n/*     %put     &=clod_traverse_directories_ui    ; */\n/*     %put     &=extension_ui    ; */\n/*     %put     &=root_directory_ui    ; */\n/*     %put    &=log_file_path_ui; */\n    %let target_libname_ui = &outputtable_ui_lib;\n    %let output_dataset_name_ui = &outputtable_ui_name;\n/*     %put     &=target_libname_ui    ; */\n/*     %put     &=write_log_into_file_ui    ; */\n/*     %put    &=output_dataset_name_ui; */\n/*     %put    &=options_seq_ui; */\n    %let root_directory = ;\n    %let root_dir_src = ;\n\n    data _null_;\n        call symput('root_directory', quote(strip(scan(symget('root_directory_ui'), 2, \":\"))));\n        call symput('root_dir_src', strip(scan(symget('root_directory_ui'), 1, \":\")));\n    run;\n\n    %let is_content_dir = 0;\n    %if %upcase(\"&root_dir_src\") eq \"SASCONTENT\" %then\n    %do;\n        %let is_content_dir = 1;\n    %end;\n/*     %put &=root_directory; */\n\n    %let     target_libname    =    &target_libname_ui    ;\n    %let     write_log_into_file    =    &write_log_into_file_ui    ;\n\n\n    %let provide_default_log_path = ;\n    %let log_file_directory_source_ui = ;\n    %if \"&log_file_path_ui\" ne \"\" %then\n    %do;\n        %let provide_default_log_path = %scan(&log_file_path_ui, 2, \":\")/;\n        %let log_file_directory_source_ui = %scan(&log_file_path_ui, 1, \":\");\n    %end;\n    %if \"%upcase(&log_file_directory_source_ui)\" eq \"SASSERVER\" %then\n    %do;\n        %let install_mode_in_SAS_Content = 0;\n    %end; %else\n    %do;\n        %let install_mode_in_SAS_Content = 1;\n    %end;\n    %let target_environment = ;\n    proc sql noprint;\n        select distinct(engine)\n        into :target_environment\n        from dictionary.libnames\n        where upcase(libname) = \"%upcase(&target_libname_ui)\"\n        ;\n    quit;\n\n    %if %upcase(&target_environment) = CAS %then\n    %do;\n        %if &cas_promote_ui = 1 %then\n        %do;\n            proc casutil     incaslib=\"&target_libname_ui\"\n                            outcaslib=\"&target_libname_ui\";\n                droptable casdata = \"&output_dataset_name_ui\" quiet;\n                droptable casdata = \"&output_dataset_name_ui\" quiet;\n            quit;\n        %end;\n    %end;\n\n\n    %let overview_ds = &target_libname_ui..&output_dataset_name_ui;\n    %let traverse_directories = 1;\n    %list_all_files(\n        &root_directory,\n        &extension_ui,\n        &overview_ds,\n        laf_traverse_directories = &clod_traverse_directories_ui,\n        laf_debug_mode = &debug_mode_ui,\n        laf_directory_separator = &clod_delimiter,\n        laf_is_sas_content_directory = &is_content_dir,\n        laf_output_selection = &output_selection_ui\n        );\n\n    %if %upcase(&target_environment) = CAS %then\n    %do;\n        %if &cas_promote_ui = 1 %then\n        %do;\n            proc casutil     incaslib=\"&target_libname_ui\"\n                            outcaslib=\"&target_libname_ui\";\n                promote casdata = \"&output_dataset_name_ui\"\n                        casout=\"&output_dataset_name_ui\";\n                %if &cas_save_on_disk_ui = 1 %then\n                %do;\n                    save     casdata= \"&output_dataset_name_ui\"\n                            casout=\"&output_dataset_name_ui\" replace;\n                %end;\n            quit;\n\n        %end;\n\n    %end;\n\n    %if &write_log_to_file = 1 %then\n    %do;\n        proc printto ;\n        quit;\n    %end;\n\n    %mend execute_all;\n\n    %execute_all();\n\n    /**\n    Restore original SAS options settings\n    **/\n\n    %adjust_option_setings_controlled(\n        aosc_running_mode = RESET\n        );\n\n    %if &debug_mode_ui ne 1 %then\n    %do;\n        proc datasets lib=work;\n            delete\n                _clod:\n                _LAF_:\n                _aosc:\n                ;\n        quit;\n    %end;\n\n\n\n"}}