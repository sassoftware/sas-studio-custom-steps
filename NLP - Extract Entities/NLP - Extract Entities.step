{"creationTimeStamp":"2023-02-16T13:20:52.819Z","modifiedTimeStamp":"2023-12-13T18:41:20.304Z","createdBy":"arnold.t","modifiedBy":"arnold.t","name":"NLP - Extract Entities.step","displayName":"NLP - Extract Entities.step","localDisplayName":"NLP - Extract Entities.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","uri":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","uri":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","uri":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","uri":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","uri":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","uri":"/dataFlows/steps/f7d6cf76-cc48-4fb1-b00a-feb9ed2666b5","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"inputtable1","displayName":"inputtable1","localDisplayName":"inputtable1","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[{"name":"outputtable1","displayName":"outputtable1","localDisplayName":"outputtable1","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"Options\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"NLP - Extract Entities Options\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputtable1\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Select an input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"must be in a caslib\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outputtable1\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Select an ouput table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"may be in a caslib or a regular library\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"DocID\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Column containing document identifier:\",\n\t\t\t\t\t\"order\": true,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"table\": \"inputtable1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Text_Column\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Column containing text to extract from:\",\n\t\t\t\t\t\"order\": true,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"table\": \"inputtable1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Entity\",\n\t\t\t\t\t\"type\": \"list\",\n\t\t\t\t\t\"label\": \"Select entities to extract:\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpDate\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpMeasure\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpMoney\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpOrganization\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpPercent\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpPerson\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpPlace\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"nlpTime\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"checkbox1\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Also extract nlpNounGroup\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"The NLP - Extract Entities step allows you to use the Natural Language Processing capabilities of SAS Visual Text Analytics to pull Entities out of documents or freeform text.  You also get the starting byte and ending byte where the entities were found.   The input table must be in a caslib, and it must contain a Document ID column and a column containing the document or freeform text.\\n\\nThis version supports the nine out-of-the box defined entities (\\\"nlpDate\\\", \\\"nlpMeasure\\\", nlpMoney\\\", \\\"nlpOrganization\\\", \\\"nlpPercent\\\", \\\"nlpPerson\\\", \\\"nlpPlace\\\", \\\"nlpTime\\\").  \\n\\nThe step also allows you to optionally pull out the \\\"nlpNounGroup\\\"s found.\\n\\nThe step uses the CAS action textParse.tpParse (which is why the input table must be in a caslib).\\n\\nYou must have a license that includes support for textParse.tpParse (such as a SAS Visual Text Analytics (VTA) license or a SAS Visual Data Mining and Machine Learning (VDMML) license.)\\n\\nChange Log:\\n\\nVersion 1.1 (13DEC2023)\\n  * expanded support to include nine out-of-the-box defined entities.\\n  * added check that input is a CAS table\\n  * optimized data post-processing and delete intermediate tables\\n\\nVersion 1.0 (12DEC2022)  \\n  * Initial version   \\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputtable1\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"outputtable1\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"DocID\": [],\n\t\t\"Text_Column\": [],\n\t\t\"Entity\": [\n\t\t\t{\n\t\t\t\t\"value\": \"nlpPerson\"\n\t\t\t}\n\t\t],\n\t\t\"checkbox1\": false\n\t}\n}","templates":{"SAS":"\n/* use CAS action textParse.tpParse on freeform text   */\n\n/* Note : SS : Need to consider the macro.  Pro : can be called from other places (if needed) .  Otherwise, is it really necessary?  Open code is now possible. */\n\n\n/*-----------------------------------------------------------------------------------------*\n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n*------------------------------------------------------------------------------------------*/\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n/*-----------------------------------------------------------------------------------------*\n   Main macro, processes UI input and then invokes CAS action.\n*------------------------------------------------------------------------------------------*/\n\n%macro usr_entextr(max_entities=9) ;  \n\n/* This section creates a comma-separated list of quoted strings from the list selection */\n\n%let taglist=;  \n%do i=1 %to &max_entities;\n    %if %symexist(Entity_&i) %then \n        %if &taglist= %then  %let taglist = \"&&Entity_&i.\";\n        %else  %let taglist= &taglist,\"&&Entity_&i.\";\n%end ;\n\n%let exclude_NounGroup=;\n%if &checkbox1 = 0 %then %let exclude_NounGroup = and _Role_ ~= \"nlpNounGroup\"; \n\n/*-----------------------------------------------------------------------------------------*\n   Check that input table is a CAS table and set error flag if not.\n*------------------------------------------------------------------------------------------*/\n\n%if &inputtable1_engine=CAS %then %do;\n   %let _nee_error_flag=0;\n   %_usr_getNameCaslib(&inputtable1_lib);\n   %let inputtable1_caslib=&_usr_nameCaslib;\n%end;\n%else %do;\n   %let _nee_error_flag=1;\n   %put ERROR: Input table is not a CAS table.; \n%end;\n\n\n%if &_nee_error_flag=0 %then %do;\n/*-----------------------------------------------------------------------------------------*\n   Only execute CAS action and post-processing if input is a CAS table. \n   The error_flag macro variable uses naming convention to try to make it unique: \n       - underscore followed by first char of each word in name of custom step\n*------------------------------------------------------------------------------------------*/\n\n   proc cas;       \n      textParse.tpParse /                                         \n         docId=\"&DocID_1_name\"\n         offset={name=\"POS_ENTITY_EXTRACT\", replace=TRUE}\n         outComplexTag=TRUE\n         entities=\"STD\"\n   \t     selectEntity={opType=\"KEEP\", taglist={&taglist}}  \n         table={caslib=\"&inputtable1_caslib\",name=\"&inputtable1_name\"}\n         text=\"&Text_Column_1_name\";\n   run;\n\n   %let activeCaslib=%sysfunc(GETSESSOPT(&_SESSREF_, CASLIB));\n   /* Handle caslib name like CASUSER(userid) */\n   %let activeCaslib=%sysfunc(scan(&activeCaslib, 1, %str(%() ));\n\n   data &outputtable1;\n       /*-----------------------------------------------------------------------------------------*\n           Use data set drop= option to avoid reading unused columns\n           Use data set where= option to avoid reading rows not needed\n        *------------------------------------------------------------------------------------------*/\n      set &activeCaslib..POS_ENTITY_EXTRACT( drop= _ComplexTag_ _Attribute_ _Parent_ _Sentence_ _Paragraph_ \n                                             where = (kupcase(_Role_) contains \"NLP\" &exclude_NounGroup)      ) ;\n   run;\n   \n/* -----------------------------------------------------------------------------------------* \n    Remove intermediate tables \n      Note: By not specifying caslib in dropTable, the active caslib will be used.\n*------------------------------------------------------------------------------------------ */\n   \n   proc cas;\n      table.dropTable / name=\"POS_ENTITY_EXTRACT\"  quiet=true;\n   run; quit;\n\n%end; /* if &_nee_errorflag=0 */\n\n/*-----------------------------------------------------------------------------------------*\n   Clean up user-defined macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n\n%sysmacdelete _usr_getNameCaslib;\n\n%mend usr_entextr;\n%usr_entextr() ;   \n   "}}